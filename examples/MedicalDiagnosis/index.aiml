---
name: MedicalDiagnosisAssistant
inputSchema:
  type: object
  properties:
    symptoms:
      type: array
      items:
        type: string
      description: List of symptoms the patient is experiencing
    duration:
      type: number
      description: Duration of symptoms in days
    patientAge:
      type: number
      description: Age of the patient in years
    patientGender:
      type: string
      enum: ["male", "female", "other"]
      description: Gender of the patient
    medicalHistory:
      type: array
      items:
        type: string
      description: Previous medical conditions
root: true
---

{/* 
This AIML file implements a medical diagnosis assistant that helps analyze patient symptoms
and medical history to provide potential diagnoses. It follows a structured workflow that
mimics clinical reasoning - gathering information, analyzing symptoms, generating potential
diagnoses, and providing recommendations.

The system is designed to be cautious and always emphasize that medical attention should be
sought for proper diagnosis. Each diagnostic possibility is rated by likelihood and includes
rationale for why it might match the patient's presentation.
*/}

import MedicalGuidelines from "./MedicalGuidelines.json"
import EmergencySymptoms from "./EmergencySymptoms.json"

<workflow initial="emergencyCheck">
  <datamodel>
    <data id="symptoms" type="json" schema={{
        type: "array",
        items: { type: "string" }
    }}>{ctx => ctx.workflowInput.symptoms}</data>
    <data id="duration" type="number">{ctx => ctx.workflowInput.duration}</data>
    <data id="patientAge" type="number">{ctx => ctx.workflowInput.patientAge}</data>
    <data id="patientGender" type="string">{ctx => ctx.workflowInput.patientGender}</data>
    <data id="medicalHistory" type="json" schema={{
        type: "array",
        items: { type: "string" }
    }}>{ctx => ctx.workflowInput.medicalHistory}</data>
    <data id="isEmergency" type="boolean" value={false} />
    <data id="emergencyReason" type="string" value={""} />
    <data id="symptomGroups" type="json" value={{}} schema={{
        type: "object",
        properties: {
          respiratory: { type: "array" },
          cardiovascular: { type: "array" },
          gastrointestinal: { type: "array" },
          neurological: { type: "array" },
          musculoskeletal: { type: "array" },
          dermatological: { type: "array" },
          general: { type: "array" }
        },
        required: ["respiratory", "cardiovascular", "gastrointestinal", "neurological", "musculoskeletal", "dermatological", "general"]
    }} />
    <data id="potentialDiagnoses" type="json" value={[]} schema={{
        type: "array",
        items: { type: "object", properties: {
          diagnosis: { type: "string" },
          likelihood: { type: "string" },
          explanation: { type: "string" },
          keySymptoms: { type: "array", items: { type: "string" } }
        }
    }} />
    <data id="diagnosticReasoning" type="string" value={""} />
    <data id="recommendations" type="json" value={[]} schema={{
        type: "array",
        items: { type: "object", properties: {
          type: { type: "string" },
          urgency: { type: "string" },
          recommendation: { type: "string" },
          rationale: { type: "string" }
        },
        required: ["type", "urgency", "recommendation", "rationale"]
    }} />
  </datamodel>

  <state id="emergencyCheck">
      <script>{`
        // Check if any symptoms match emergency symptoms
        const emergencySymptoms = JSON.parse(EmergencySymptoms);
        let isEmergency = false;
        let emergencyReason = "";
        
        for (const symptom of ctx.datamodel.symptoms) {
          const matchedEmergency = emergencySymptoms.find(es => 
            symptom.toLowerCase().includes(es.keyword.toLowerCase())
          );
          
          if (matchedEmergency) {
            isEmergency = true;
            emergencyReason = matchedEmergency.reason;
            break;
          }
        }
        
        // Check age-related emergency conditions
        if (ctx.datamodel.patientAge < 2 && ctx.datamodel.duration > 2 && ctx.datamodel.symptoms.some(s => 
          s.toLowerCase().includes("fever") || 
          s.toLowerCase().includes("rash") || 
          s.toLowerCase().includes("not eating"))) {
          isEmergency = true;
          emergencyReason = "Infants under 2 years with persistent symptoms require immediate medical attention";
        }
        
        // Check for elderly with certain symptoms
        if (ctx.datamodel.patientAge > 65 && ctx.datamodel.symptoms.some(s => 
          s.toLowerCase().includes("confusion") || 
          s.toLowerCase().includes("severe pain") || 
          s.toLowerCase().includes("shortness of breath"))) {
          isEmergency = true;
          emergencyReason = "Elderly patients with these symptoms should seek immediate medical care";
        }
        
        // Store the results to be assigned to the datamodel
        return {
          isEmergency,
          emergencyReason
        };
      `}</script>
      
      <assign location="isEmergency" value={(ctx) => ctx.lastElement.output.isEmergency} />
      <assign location="emergencyReason" value={(ctx) => ctx.lastElement.output.emergencyReason} />
      
      <log value={(ctx) => 'Emergency check completed: ' + (ctx.datamodel.isEmergency ? 'YES - ' + ctx.datamodel.emergencyReason : 'No')} />
    
      <transition cond={(ctx) => ctx.datamodel.isEmergency} target="emergencyResponse" />
      <transition target="symptomAnalysis" />
  </state>

  <final id="emergencyResponse">
      <sendText>
        ⚠️ EMERGENCY WARNING ⚠️
        
        Based on the information provided, this appears to be a medical emergency requiring IMMEDIATE medical attention.
        
        Reason: {ctx.datamodel.emergencyReason}
        
        Please contact emergency services (911, 999, 112, etc.) immediately or go to the nearest emergency room.
        Do NOT wait for symptoms to worsen.
        
        This is an automated assessment and is not a substitute for professional medical advice.
      </sendText>
  </final>

  <state id="symptomAnalysis">
      <script>{`
        // Group symptoms by body system
        const bodySystems = {
          respiratory: ["cough", "shortness of breath", "wheezing", "sore throat", "congestion"],
          cardiovascular: ["chest pain", "palpitations", "high blood pressure", "swelling"],
          gastrointestinal: ["nausea", "vomiting", "diarrhea", "constipation", "abdominal pain"],
          neurological: ["headache", "dizziness", "confusion", "numbness", "tingling"],
          musculoskeletal: ["joint pain", "muscle pain", "weakness", "stiffness", "back pain"],
          dermatological: ["rash", "itching", "hives", "skin lesion", "discoloration"],
          general: ["fever", "fatigue", "weight loss", "weight gain", "night sweats"]
        };
        
        let symptomGroups = {};
        for (const [system, keywords] of Object.entries(bodySystems)) {
          const matchedSymptoms = ctx.datamodel.symptoms.filter(symptom => 
            keywords.some(keyword => symptom.toLowerCase().includes(keyword))
          );
          
          if (matchedSymptoms.length > 0) {
            symptomGroups[system] = matchedSymptoms;
          }
        }
        
        // Assign any unmatched symptoms to "other"
        const allGroupedSymptoms = Object.values(symptomGroups).flat();
        const ungroupedSymptoms = ctx.datamodel.symptoms.filter(symptom => 
          !allGroupedSymptoms.includes(symptom)
        );
        
        if (ungroupedSymptoms.length > 0) {
          symptomGroups.other = ungroupedSymptoms;
        }
        
        // Store the results to be assigned to the datamodel
        return {
          symptomGroups
        };
      `}</script>
      
      <assign location="symptomGroups" value={(ctx) => ctx.lastElement.output.symptomGroups} />
      
      <log value={(ctx) => 'Symptom analysis complete. Identified ' + Object.keys(ctx.datamodel.symptomGroups).length + ' affected body systems'} />
      <transition target="generateDiagnoses" />
  </state>

  <state id="generateDiagnoses">
      <llm model="gpt-4o" temperature={0.3}>
        <prompt>
          You are an AI medical diagnostic assistant. Based on the following patient information, 
          generate potential diagnoses with likelihood ratings and explanations. Be thorough but 
          conservative, and always emphasize that a healthcare professional must make the actual diagnosis.
          
          Patient Information:
          - Age: {ctx.datamodel.patientAge}
          - Gender: {ctx.datamodel.patientGender}
          - Symptom Duration: {ctx.datamodel.duration} days
          - Medical History: {ctx.datamodel.medicalHistory.join(", ") || "None reported"}
          
          Symptoms by body system:
          {Object.entries(ctx.datamodel.symptomGroups).map(([system, symptoms]) => 
            `- ${system.charAt(0).toUpperCase() + system.slice(1)}: ${symptoms.join(", ")}`
          ).join("\n")}
          
          Provide a minimum of 3 and maximum of 5 potential diagnoses in JSON format:
          [
            {
              "diagnosis": "Name of condition",
              "likelihood": "high|medium|low",
              "explanation": "Why this might match the presentation",
              "keySymptoms": ["matching symptom 1", "matching symptom 2"]
            }
          ]
          
          Order diagnoses from most to least likely. Include common conditions as well as more serious 
          possibilities that should not be missed. Consider age, gender, and duration in your assessment.
        </prompt>
      </llm>
      <script>{`
        let potentialDiagnoses;
        try {
          potentialDiagnoses = JSON.parse(ctx.lastElement.output);
          
          // Validate structure
          if (!Array.isArray(potentialDiagnoses)) {
            throw new Error("Diagnoses not in array format");
          }
          
          // Ensure we have at least one diagnosis
          if (potentialDiagnoses.length === 0) {
            throw new Error("No diagnoses generated");
          }
        } catch (e) {
          ctx.log("Error parsing diagnoses: " + e.message);
          // Create a fallback diagnosis
          potentialDiagnoses = [
            {
              diagnosis: "Insufficient information for accurate assessment",
              likelihood: "medium",
              explanation: "The symptoms provided are too general or may match many conditions. A healthcare provider should evaluate the patient.",
              keySymptoms: ctx.datamodel.symptoms
            }
          ];
        }
        
        // Store the results to be assigned to the datamodel
        return {
          potentialDiagnoses
        };
      `}</script>
      
      <assign location="potentialDiagnoses" value={(ctx) => ctx.lastElement.output.potentialDiagnoses} />
      
      <transition target="generateReasoning" />
  </state>

  <state id="generateReasoning">
      <llm model="gpt-4o" temperature={0.2}>
        <prompt>
          Generate a clinical reasoning explanation based on this patient's presentation.
          Explain how the symptoms, history, and patient factors point to the potential diagnoses.
          This should be a professional explanation of the diagnostic thought process.
          
          Patient Information:
          - Age: {ctx.datamodel.patientAge}
          - Gender: {ctx.datamodel.patientGender}
          - Symptom Duration: {ctx.datamodel.duration} days
          - Medical History: {ctx.datamodel.medicalHistory.join(", ") || "None reported"}
          
          Symptoms by body system:
          {Object.entries(ctx.datamodel.symptomGroups).map(([system, symptoms]) => 
            `- ${system.charAt(0).toUpperCase() + system.slice(1)}: ${symptoms.join(", ")}`
          ).join("\n")}
          
          Potential Diagnoses:
          {ctx.datamodel.potentialDiagnoses.map(d => 
            `- ${d.diagnosis} (${d.likelihood} likelihood): ${d.explanation}`
          ).join("\n")}
          
          Provide a structured clinical reasoning analysis that:
          1. Identifies patterns in the symptoms
          2. Explains why certain diagnoses were prioritized
          3. Discusses how patient factors influence the assessment
          4. Mentions what additional information would be helpful
          
          Keep the explanation concise (200-300 words) but medically accurate and educational.
        </prompt>
      </llm>
      <assign location="diagnosticReasoning" value={(ctx) => ctx.lastElement.output} />
      <transition target="formRecommendations" />
  </state>

  <state id="formRecommendations">
      <llm model="gpt-4o" temperature={0.3}>
        <prompt>
          Based on the following potential diagnoses:
          {JSON.stringify(ctx.datamodel.potentialDiagnoses)}
          
          And the diagnostic reasoning:
          {ctx.datamodel.diagnosticReasoning}
          
          Generate practical recommendations for the patient. These should include:
          1. General advice based on symptoms
          2. When to seek medical attention (urgent, soon, routine)
          3. Lifestyle modifications that may help
          4. Information on what to discuss with healthcare providers
          5. Reliable resources for further patient education
          
          Remember that these recommendations:
          - Should NOT prescribe specific medications
          - Should emphasize the importance of consultation with healthcare providers
          - Should be clear, actionable, and evidence-based
          - Should acknowledge the limitations of this analysis
          
          Format your response as a JSON array of recommendation objects, each with:
          - "type": Category of recommendation (e.g., "general", "medicalCare", "lifestyle", "resources")
          - "recommendation": The specific advice
          - "urgency": For medical care recommendations, indicate "emergency", "urgent", "soon", or "routine"
          - "rationale": Brief explanation of why this recommendation is important
        </prompt>
      </llm>
      <script>{`
        let recommendations;
        try {
          recommendations = JSON.parse(ctx.lastElement.output);
          if (!Array.isArray(recommendations)) {
            throw new Error("Recommendations not in array format");
          }
        } catch (e) {
          ctx.log("Error parsing recommendations: " + e.message);
          recommendations = [
            {
              type: "general",
              recommendation: "Consult with a healthcare provider for proper evaluation",
              rationale: "A professional medical assessment is needed for accurate diagnosis and treatment"
            }
          ];
        }
        
        // Prepare the final diagnosis results
        const finalDiagnosis = {
          "diagnoses": ctx.datamodel.potentialDiagnoses,
          "reasoning": ctx.datamodel.diagnosticReasoning,
          "recommendations": recommendations,
          "disclaimer": "This analysis is for informational purposes only and does not constitute medical advice. Always consult with a qualified healthcare provider for proper diagnosis and treatment."
        };
        
        // Store the results to be assigned to the datamodel
        return {
          recommendations,
          finalDiagnosis
        };
      `}</script>
      
      <assign location="recommendations" value={(ctx) => ctx.lastElement.output.recommendations} />
      <assign location="finalDiagnosis" value={(ctx) => ctx.lastElement.output.finalDiagnosis} />
      
      <transition target="presentResults" />
  </state>

  <final id="presentResults" />
</workflow>