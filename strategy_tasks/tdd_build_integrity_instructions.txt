# TDD and Build Integrity Instructions

## Objective
Ensure development quality by: 1) preventing any code changes from being accepted unless all packages successfully build and all tests pass, and 2) implementing Test-Driven Development (TDD) practices with minimal mocks for all `packages/*` code.

## Context
The AIML project is a TypeScript-based monorepo managed by Turborepo with interdependent packages. The dependency flow is: types → element-config → shared → elements → runtime → parser. Applications depend on these core packages. The current build and test process uses bun (test runner and package manager) with TypeScript.

## Dependencies
- packages/* (all packages in the packages directory)
- .clinerules (for project phase tracking)
- cline_docs/activeContext.md (to update with new requirements)
- turbo.json (build pipeline configuration)
- package.json (root level scripts)

## Steps

1. **Define TDD Workflow**:
   - Establish the Red-Green-Refactor cycle for AIML development
   - Define test file location and naming conventions
   - Set coverage expectations
   - Document test tooling usage

2. **Create Build and Test Validation Gates**:
   - Implement pre-commit verification steps
   - Update package.json with validation scripts 
   - Ensure proper fail states are documented

3. **Establish Minimal Mock Guidelines**:
   - Define when to use real implementations vs mocks
   - Document strategies for minimal mocking
   - Provide examples of appropriate mocking patterns
   - Create guidelines for testing complex interdependencies

4. **Update Existing Documentation**:
   - Modify activeContext.md to reflect new requirements
   - Update .clinerules to include TDD in learning journal
   - Document the build verification process

5. **Create Developer Guides**:
   - Document step-by-step TDD workflow
   - Provide examples of TDD in the context of the AIML project
   - Include troubleshooting for common TDD and build issues

## Expected Output
- Updated documentation with clear TDD and build integrity requirements
- New scripts for build and test validation
- Examples of proper TDD implementation for AIML components
- Updated project standards for code review and acceptance

## Notes
- The key goal is to prevent code that doesn't build or pass tests from being accepted
- All packages are interdependent, so testing should account for these relationships
- TDD in a monorepo presents unique challenges that must be addressed in guidelines
- Minimal mocking means preferring real implementations where practical but using mocks where necessary to maintain test isolation
