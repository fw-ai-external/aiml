{
  "name": "vscode-aiml",
  "version": "0.0.1",
  "displayName": "AIML",
  "description": "Language support for AIML",
  "categories": ["Programming Languages"],

  "license": "MIT",
  "private": true,
  "engines": {
    "vscode": "^1.82.0"
  },
  "main": "dist/extension.js",
  "keywords": ["aiml", "aiml"],
  "icon": "assets/aiml.png",
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact"
  ],
  "scripts": {
    "generate": "node --conditions development ./script/generate.mjs",
    "build": "node ./script/build.mjs",
    "package": "vsce package --no-dependencies",
    "publish": "vsce publish --no-dependencies",
    "vscode:prepublish": "node ./script/build.mjs"
  },
  "devDependencies": {
    "@types/node": "^22.0.0",
    "@types/vscode": "^1.82.0",
    "@volar/language-server": "~2.4.0",
    "@volar/vscode": "~2.4.0",
    "@vscode/vsce": "^3.0.0",
    "esbuild": "^0.24.0",
    "ovsx": "^0.10.0"
  },
  "galleryBanner": {
    "color": "#fcb32c",
    "theme": "light"
  },
  "contributes": {
    "breakpoints": [
      {
        "language": "aiml"
      }
    ],
    "configuration": [
      {
        "title": "AIML",
        "properties": {
          "aiml.server.enable": {
            "type": "boolean",
            "default": true,
            "description": "Enable experimental IntelliSense support for MDX files."
          },
          "aiml.trace.server.verbosity": {
            "enum": ["off", "messages", "compact", "verbose"],
            "default": "off",
            "description": "Trace AIML language server requests in the output console."
          },
          "aiml.trace.server.format": {
            "enum": ["text", "json"],
            "default": "text",
            "description": "How to format traced AIML language server requests."
          },
          "aiml.validate.validateReferences": {
            "enum": ["ignore", "hint", "warning", "error"],
            "default": "ignore",
            "markdownDescription": "Diagnostic level for invalid reference links, e.g. `[text][no-such-ref]`."
          },
          "aiml.validate.validateFragmentLinks": {
            "enum": ["ignore", "hint", "warning", "error"],
            "default": "ignore",
            "markdownDescription": "Diagnostic level for fragments links to headers in the current file that don’t exist, e.g. `[text](#no-such-header)`."
          },
          "aiml.validate.validateFileLinks": {
            "enum": ["ignore", "hint", "warning", "error"],
            "default": "ignore",
            "markdownDescription": "Diagnostic level for links to local files that don’t exist, e.g. `[text](./no-such-file.png)`."
          },
          "aiml.validate.validateMarkdownFileLinkFragments": {
            "enum": ["ignore", "hint", "warning", "error"],
            "default": "ignore",
            "markdownDescription": "Diagnostic level for the fragment part of links to other local markdown files , e.g. `[text](./file.md#no-such-header)`."
          },
          "aiml.validate.validateUnusedLinkDefinitions": {
            "enum": ["ignore", "hint", "warning", "error"],
            "default": "ignore",
            "markdownDescription": "Diagnostic level for link definitions that aren’t used anywhere. `[never-used]: http://example.com`."
          },
          "aiml.validate.validateDuplicateLinkDefinitions": {
            "enum": ["ignore", "hint", "warning", "error"],
            "default": "ignore",
            "markdownDescription": "Diagnostic level for duplicate link definitions."
          },
          "aiml.validate.ignoreLinks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "markdownDescription": "Glob of links that should not be validated."
          }
        }
      }
    ],

    "languages": [
      {
        "id": "aiml",
        "aliases": ["AIML"],
        "extensions": [".aiml"],
        "configuration": "./language-configuration.json",
        "icon": {
          "dark": "./assets/file-icon.svg",
          "light": "./assets/file-icon.svg"
        }
      }
    ],
    "jsonValidation": [
      {
        "fileMatch": ["tsconfig.json", "tsconfig.*.json", "tsconfig-*.json", "jsconfig.json", "jsconfig.*.json"],
        "url": "./tsconfig.schema.json"
      }
    ],
    "commands": [
      {
        "command": "aiml.toggleDelete",
        "title": "Toggle Delete",
        "category": "AIML"
      },
      {
        "command": "aiml.toggleEmphasis",
        "title": "Toggle Emphasis",
        "category": "AIML"
      },
      {
        "command": "aiml.toggleInlineCode",
        "title": "Toggle Inline Code",
        "category": "AIML"
      },
      {
        "command": "aiml.toggleStrong",
        "title": "Toggle Strong",
        "category": "AIML"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "aiml.toggleDelete",
          "when": "editorTextFocus && !editorReadonly && editorLangId == aiml",
          "group": "1_modification"
        },
        {
          "command": "aiml.toggleEmphasis",
          "when": "editorTextFocus && !editorReadonly && editorLangId == aiml",
          "group": "1_modification"
        },
        {
          "command": "aiml.toggleInlineCode",
          "when": "editorTextFocus && !editorReadonly && editorLangId == aiml",
          "group": "1_modification"
        },
        {
          "command": "aiml.toggleStrong",
          "when": "editorTextFocus && !editorReadonly && editorLangId == aiml",
          "group": "1_modification"
        }
      ]
    },
    "grammars": [
      {
        "language": "aiml",
        "scopeName": "source.aiml",
        "path": "./syntaxes/source.aiml.tmLanguage",
        "#1": "note: the below list maps TextMate scopes to VS Code Language IDs (<https://code.visualstudio.com/docs/languages/identifiers>), which does not affect syntax highlighting, but affects for example how comments work.",
        "#2": "note: `graphql`, `kotlin`, `toml` have no names in that list, but do work with the most popular extension.",
        "#3": "note: we map to JSX-enabled flavors of `js` and `ts`",
        "#4": "note: I have no clue how to test `vbnet` (visual basic), I cannot find extensions",
        "embeddedLanguages": {
          "meta.embedded.json": "json",
          "meta.embedded.md": "markdown",
          "meta.embedded.mdx": "mdx",
          "meta.embedded.python": "python",
          "meta.embedded.js": "javascript"
        }
      },
      {
        "scopeName": "source.markdown.aiml.codeblock",
        "path": "./syntaxes/aiml.markdown.tmLanguage.json",
        "injectTo": ["text.html.markdown"],
        "embeddedLanguages": {
          "meta.embedded.block.aiml": "aiml"
        }
      }
    ],
    "typescriptServerPlugins": [
      {
        "name": "@fireworks/typescript-plugin",
        "enableForWorkspaceTypeScriptVersions": true,
        "configNamespace": "typescript",
        "languages": ["aiml"]
      }
    ]
  }
}
