{
  "displayName": "AIML",
  "fileTypes": ["aiml"],
  "name": "aiml",
  "patterns": [
    {
      "include": "#markdown-frontmatter"
    },
    {
      "include": "#markdown-sections"
    }
  ],
  "repository": {
    "commonmark-attention": {
      "patterns": [
        {
          "match": "(?<=\\S)\\*{3,}|\\*{3,}(?=\\S)",
          "name": "string.other.strong.emphasis.asterisk.mdx"
        },
        {
          "match": "(?<=[\\p{L}\\p{N}])_{3,}(?![\\p{L}\\p{N}])|(?<=\\p{P})_{3,}|(?<![\\p{L}\\p{N}]|\\p{P})_{3,}(?!\\s)",
          "name": "string.other.strong.emphasis.underscore.mdx"
        },
        {
          "match": "(?<=\\S)\\*{2}|\\*{2}(?=\\S)",
          "name": "string.other.strong.asterisk.mdx"
        },
        {
          "match": "(?<=[\\p{L}\\p{N}])_{2}(?![\\p{L}\\p{N}])|(?<=\\p{P})_{2}|(?<![\\p{L}\\p{N}]|\\p{P})_{2}(?!\\s)",
          "name": "string.other.strong.underscore.mdx"
        },
        {
          "match": "(?<=\\S)\\*|\\*(?=\\S)",
          "name": "string.other.emphasis.asterisk.mdx"
        },
        {
          "match": "(?<=[\\p{L}\\p{N}])_(?![\\p{L}\\p{N}])|(?<=\\p{P})_|(?<![\\p{L}\\p{N}]|\\p{P})_(?!\\s)",
          "name": "string.other.emphasis.underscore.mdx"
        }
      ]
    },
    "commonmark-block-quote": {
      "begin": "(?:^|\\G)[\\t ]*(>)[ ]?",
      "beginCaptures": {
        "0": {
          "name": "markup.quote.mdx"
        },
        "1": {
          "name": "punctuation.definition.quote.begin.mdx"
        }
      },
      "name": "markup.quote.mdx",
      "patterns": [
        {
          "include": "#markdown-sections"
        }
      ],
      "while": "(>)[ ]?",
      "whileCaptures": {
        "0": {
          "name": "markup.quote.mdx"
        },
        "1": {
          "name": "punctuation.definition.quote.begin.mdx"
        }
      }
    },
    "commonmark-character-escape": {
      "match": "\\\\(?:[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~])",
      "name": "constant.language.character-escape.mdx"
    },
    "commonmark-character-reference": {
      "patterns": [
        {
          "include": "#whatwg-html-data-character-reference-named-terminated"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.character-reference.begin.html"
            },
            "2": {
              "name": "punctuation.definition.character-reference.numeric.html"
            },
            "3": {
              "name": "punctuation.definition.character-reference.numeric.hexadecimal.html"
            },
            "4": {
              "name": "constant.numeric.integer.hexadecimal.html"
            },
            "5": {
              "name": "punctuation.definition.character-reference.end.html"
            }
          },
          "match": "(&)(#)([Xx])([0-9A-Fa-f]{1,6})(;)",
          "name": "constant.language.character-reference.numeric.hexadecimal.html"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.character-reference.begin.html"
            },
            "2": {
              "name": "punctuation.definition.character-reference.numeric.html"
            },
            "3": {
              "name": "constant.numeric.integer.decimal.html"
            },
            "4": {
              "name": "punctuation.definition.character-reference.end.html"
            }
          },
          "match": "(&)(#)([0-9]{1,7})(;)",
          "name": "constant.language.character-reference.numeric.decimal.html"
        }
      ]
    },
    "commonmark-code-fenced": {
      "patterns": [
        {
          "include": "#commonmark-code-fenced-js"
        },
        {
          "include": "#commonmark-code-fenced-json"
        },
        {
          "include": "#commonmark-code-fenced-python"
        },
        {
          "include": "#commonmark-code-fenced-ts"
        },
        {
          "include": "#commonmark-code-fenced-unknown"
        },
        {
          "include": "#commonmark-code-fenced-yaml"
        }
      ]
    },
    "commonmark-code-fenced-js": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:cycript|javascript\\+erb|json\\x2dwith\\x2dcomments|node|qt\\x2dscript|(?:.*\\.)?(?:_js|bones|cjs|code\\x2dsnippets|code\\x2dworkspace|cy|es6|jake|javascript|js|js\\.erb|jsb|jscad|jsfl|jslib|jsm|json5|jsonc|jsonld|jspre|jss|jsx|mjs|njs|pac|sjs|ssjs|sublime\\x2dbuild|sublime\\x2dcommands|sublime\\x2dcompletions|sublime\\x2dkeymap|sublime\\x2dmacro|sublime\\x2dmenu|sublime\\x2dmousemap|sublime\\x2dproject|sublime\\x2dsettings|sublime\\x2dtheme|sublime\\x2dworkspace|sublime_metrics|sublime_session|xsjs|xsjslib)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.js",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.js.mdx",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:cycript|javascript\\+erb|json\\x2dwith\\x2dcomments|node|qt\\x2dscript|(?:.*\\.)?(?:_js|bones|cjs|code\\x2dsnippets|code\\x2dworkspace|cy|es6|jake|javascript|js|js\\.erb|jsb|jscad|jsfl|jslib|jsm|json5|jsonc|jsonld|jspre|jss|jsx|mjs|njs|pac|sjs|ssjs|sublime\\x2dbuild|sublime\\x2dcommands|sublime\\x2dcompletions|sublime\\x2dkeymap|sublime\\x2dmacro|sublime\\x2dmenu|sublime\\x2dmousemap|sublime\\x2dproject|sublime\\x2dsettings|sublime\\x2dtheme|sublime\\x2dworkspace|sublime_metrics|sublime_session|xsjs|xsjslib)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.js",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.js.mdx",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    "commonmark-code-fenced-json": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:ecere\\x2dprojects|ipython\\x2dnotebook|jupyter\\x2dnotebook|max|max/msp|maxmsp|oasv2\\x2djson|oasv3\\x2djson|(?:.*\\.)?(?:4dform|4dproject|avsc|epj|geojson|gltf|har|ice|ipynb|json|json|json|json\\x2dtmlanguage|jsonl|maxhelp|maxpat|maxproj|mcmeta|mxt|pat|tfstate|tfstate\\.backup|topojson|webapp|webmanifest|yy|yyp)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.json",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.json.mdx",
          "patterns": [
            {
              "include": "source.json"
            }
          ]
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:ecere\\x2dprojects|ipython\\x2dnotebook|jupyter\\x2dnotebook|max|max/msp|maxmsp|oasv2\\x2djson|oasv3\\x2djson|(?:.*\\.)?(?:4dform|4dproject|avsc|epj|geojson|gltf|har|ice|ipynb|json|json|json|json\\x2dtmlanguage|jsonl|maxhelp|maxpat|maxproj|mcmeta|mxt|pat|tfstate|tfstate\\.backup|topojson|webapp|webmanifest|yy|yyp)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.json",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.json.mdx",
          "patterns": [
            {
              "include": "source.json"
            }
          ]
        }
      ]
    },
    "commonmark-code-fenced-python": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:bazel|easybuild|python|python3|rusthon|snakemake|starlark|xonsh|(?:.*\\.)?(?:bzl|eb|gyp|gypi|lmi|py|py3|pyde|pyi|pyp|pyt|pyw|rpy|sage|sagews|smk|snakefile|spec|tac|wsgi|xpy|xsh)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.python",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.python.mdx",
          "patterns": [
            {
              "include": "source.python"
            }
          ]
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:bazel|easybuild|python|python3|rusthon|snakemake|starlark|xonsh|(?:.*\\.)?(?:bzl|eb|gyp|gypi|lmi|py|py3|pyde|pyi|pyp|pyt|pyw|rpy|sage|sagews|smk|snakefile|spec|tac|wsgi|xpy|xsh)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.python",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.python.mdx",
          "patterns": [
            {
              "include": "source.python"
            }
          ]
        }
      ]
    },

    "commonmark-code-fenced-ts": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:typescript|(?:.*\\.)?(?:cts|mts|ts)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.ts",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.ts.mdx",
          "patterns": [
            {
              "include": "source.ts"
            }
          ]
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:typescript|(?:.*\\.)?(?:cts|mts|ts)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.ts",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.ts.mdx",
          "patterns": [
            {
              "include": "source.ts"
            }
          ]
        }
      ]
    },

    "commonmark-code-fenced-unknown": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?:[^\\t\\n\\r` ])+)(?:[\\t ]+((?:[^\\n\\r`])+))?)?(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "markup.raw.code.fenced.mdx",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.other.mdx"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?:[^\\t\\n\\r ])+)(?:[\\t ]+((?:[^\\n\\r])+))?)?(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "markup.raw.code.fenced.mdx",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.other.mdx"
        }
      ]
    },

    "commonmark-code-fenced-yaml": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*(`{3,})(?:[\\t ]*((?i:jar\\x2dmanifest|kaitai\\x2dstruct|oasv2\\x2dyaml|oasv3\\x2dyaml|unity3d\\x2dasset|yaml|yml|(?:.*\\.)?(?:anim|asset|ksy|lkml|lookml|mat|meta|mir|prefab|raml|reek|rviz|sublime\\x2dsyntax|syntax|unity|yaml\\x2dtmlanguage|yaml\\.sed|yml\\.mysql)))(?:[\\t ]+((?:[^\\n\\r`])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.yaml",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.yaml.mdx",
          "patterns": [
            {
              "include": "source.yaml"
            }
          ]
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(~{3,})(?:[\\t ]*((?i:jar\\x2dmanifest|kaitai\\x2dstruct|oasv2\\x2dyaml|oasv3\\x2dyaml|unity3d\\x2dasset|yaml|yml|(?:.*\\.)?(?:anim|asset|ksy|lkml|lookml|mat|meta|mir|prefab|raml|reek|rviz|sublime\\x2dsyntax|syntax|unity|yaml\\x2dtmlanguage|yaml\\.sed|yml\\.mysql)))(?:[\\t ]+((?:[^\\n\\r])+))?)(?:[\\t ]*$)",
          "beginCaptures": {
            "1": {
              "name": "string.other.begin.code.fenced.mdx"
            },
            "2": {
              "name": "entity.name.function.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "3": {
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            }
          },
          "contentName": "meta.embedded.yaml",
          "end": "(\\1)(?:[\\t ]*$)",
          "endCaptures": {
            "1": {
              "name": "string.other.end.code.fenced.mdx"
            }
          },
          "name": "markup.code.yaml.mdx",
          "patterns": [
            {
              "include": "source.yaml"
            }
          ]
        }
      ]
    },
    "commonmark-code-text": {
      "captures": {
        "1": {
          "name": "string.other.begin.code.mdx"
        },
        "2": {
          "name": "markup.raw.code.mdx markup.inline.raw.code.mdx"
        },
        "3": {
          "name": "string.other.end.code.mdx"
        }
      },
      "match": "(?<!`)(`+)(?!`)(.+?)(?<!`)(\\1)(?!`)",
      "name": "markup.code.other.mdx"
    },
    "commonmark-definition": {
      "captures": {
        "1": {
          "name": "string.other.begin.mdx"
        },
        "10": {
          "name": "string.quoted.double.mdx",
          "patterns": [
            {
              "include": "#markdown-string"
            }
          ]
        },
        "11": {
          "name": "string.other.end.mdx"
        },
        "12": {
          "name": "string.other.begin.mdx"
        },
        "13": {
          "name": "string.quoted.single.mdx",
          "patterns": [
            {
              "include": "#markdown-string"
            }
          ]
        },
        "14": {
          "name": "string.other.end.mdx"
        },
        "15": {
          "name": "string.other.begin.mdx"
        },
        "16": {
          "name": "string.quoted.paren.mdx",
          "patterns": [
            {
              "include": "#markdown-string"
            }
          ]
        },
        "17": {
          "name": "string.other.end.mdx"
        },
        "2": {
          "name": "entity.name.identifier.mdx",
          "patterns": [
            {
              "include": "#markdown-string"
            }
          ]
        },
        "3": {
          "name": "string.other.end.mdx"
        },
        "4": {
          "name": "punctuation.separator.key-value.mdx"
        },
        "5": {
          "name": "string.other.begin.destination.mdx"
        },
        "6": {
          "name": "string.other.link.destination.mdx",
          "patterns": [
            {
              "include": "#markdown-string"
            }
          ]
        },
        "7": {
          "name": "string.other.end.destination.mdx"
        },
        "8": {
          "name": "string.other.link.destination.mdx",
          "patterns": [
            {
              "include": "#markdown-string"
            }
          ]
        },
        "9": {
          "name": "string.other.begin.mdx"
        }
      },
      "match": "(?:^|\\G)[\\t ]*(\\[)((?:[^\\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+?)(\\])(:)[ \\t]*(?:(<)((?:[^\\n<\\\\>]|\\\\[<\\\\>]?)*)(>)|(\\g<destination_raw>))(?:[\\t ]+(?:(\")((?:[^\"\\\\]|\\\\[\"\\\\]?)*)(\")|(')((?:[^'\\\\]|\\\\['\\\\]?)*)(')|(\\()((?:[^\\)\\\\]|\\\\[\\)\\\\]?)*)(\\))))?$(?<destination_raw>(?!\\<)(?:(?:[^\\p{Cc}\\ \\\\\\(\\)]|\\\\[\\(\\)\\\\]?)|\\(\\g<destination_raw>*\\))+){0}",
      "name": "meta.link.reference.def.mdx"
    },
    "commonmark-hard-break-escape": {
      "match": "\\\\$",
      "name": "constant.language.character-escape.line-ending.mdx"
    },
    "commonmark-hard-break-trailing": {
      "match": "( ){2,}$",
      "name": "carriage-return constant.language.character-escape.line-ending.mdx"
    },
    "commonmark-label-end": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "string.other.end.mdx"
            },
            "10": {
              "name": "string.other.begin.mdx"
            },
            "11": {
              "name": "string.quoted.single.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "12": {
              "name": "string.other.end.mdx"
            },
            "13": {
              "name": "string.other.begin.mdx"
            },
            "14": {
              "name": "string.quoted.paren.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "15": {
              "name": "string.other.end.mdx"
            },
            "16": {
              "name": "string.other.end.mdx"
            },
            "2": {
              "name": "string.other.begin.mdx"
            },
            "3": {
              "name": "string.other.begin.destination.mdx"
            },
            "4": {
              "name": "string.other.link.destination.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "5": {
              "name": "string.other.end.destination.mdx"
            },
            "6": {
              "name": "string.other.link.destination.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "7": {
              "name": "string.other.begin.mdx"
            },
            "8": {
              "name": "string.quoted.double.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "9": {
              "name": "string.other.end.mdx"
            }
          },
          "match": "(\\])(\\()[\\t ]*(?:(?:(<)((?:[^\\n<\\\\>]|\\\\[<\\\\>]?)*)(>)|(\\g<destination_raw>))(?:[\\t ]+(?:(\")((?:[^\"\\\\]|\\\\[\"\\\\]?)*)(\")|(')((?:[^'\\\\]|\\\\['\\\\]?)*)(')|(\\()((?:[^\\)\\\\]|\\\\[\\)\\\\]?)*)(\\))))?)?[\\t ]*(\\))(?<destination_raw>(?!\\<)(?:(?:[^\\p{Cc}\\ \\\\\\(\\)]|\\\\[\\(\\)\\\\]?)|\\(\\g<destination_raw>*\\))+){0}"
        },
        {
          "captures": {
            "1": {
              "name": "string.other.end.mdx"
            },
            "2": {
              "name": "string.other.begin.mdx"
            },
            "3": {
              "name": "entity.name.identifier.mdx",
              "patterns": [
                {
                  "include": "#markdown-string"
                }
              ]
            },
            "4": {
              "name": "string.other.end.mdx"
            }
          },
          "match": "(\\])(\\[)((?:[^\\[\\\\\\]]|\\\\[\\[\\\\\\]]?)+?)(\\])"
        },
        {
          "captures": {
            "1": {
              "name": "string.other.end.mdx"
            }
          },
          "match": "(\\])"
        }
      ]
    },
    "commonmark-label-start": {
      "patterns": [
        {
          "match": "\\!\\[(?!\\^)",
          "name": "string.other.begin.image.mdx"
        },
        {
          "match": "\\[",
          "name": "string.other.begin.link.mdx"
        }
      ]
    },
    "commonmark-list-item": {
      "patterns": [
        {
          "begin": "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{4}(?![ ])|\\t)(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "variable.unordered.list.mdx"
            },
            "2": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{1}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{3}(?![ ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "variable.unordered.list.mdx"
            },
            "2": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{2}(?![ ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "variable.unordered.list.mdx"
            },
            "2": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)[ ]{3}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*((?:[*+-]))(?:[ ]{1}|(?=\\n))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "variable.unordered.list.mdx"
            },
            "2": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)[ ]{2}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*([0-9]{9})((?:\\.|\\)))(?:[ ]{4}(?![ ])|\\t(?![\\t ]))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}[ ]{2}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{8})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}[ ]{1}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{8})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{7})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){3}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{9})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{8})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{7})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{6})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "string.other.number.mdx"
            },
            "8": {
              "name": "variable.ordered.list.mdx"
            },
            "9": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{3}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{8})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{7})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{6})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{5})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "string.other.number.mdx"
            },
            "8": {
              "name": "variable.ordered.list.mdx"
            },
            "9": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{2}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{7})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{6})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{5})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{4})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "string.other.number.mdx"
            },
            "8": {
              "name": "variable.ordered.list.mdx"
            },
            "9": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}[ ]{1}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{6})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{5})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{4})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{3})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "string.other.number.mdx"
            },
            "8": {
              "name": "variable.ordered.list.mdx"
            },
            "9": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t){2}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{5})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{4})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{3})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{2})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "string.other.number.mdx"
            },
            "8": {
              "name": "variable.ordered.list.mdx"
            },
            "9": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{3}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{4})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{3})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{2})((?:\\.|\\)))(?:[ ]{3}(?![ ]))|([0-9]{1})((?:\\.|\\)))(?:[ ]{4}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "string.other.number.mdx"
            },
            "8": {
              "name": "variable.ordered.list.mdx"
            },
            "9": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{2}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{3})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9]{2})((?:\\.|\\)))(?:[ ]{2}(?![ ]))|([0-9]{1})((?:\\.|\\)))(?:[ ]{3}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "string.other.number.mdx"
            },
            "6": {
              "name": "variable.ordered.list.mdx"
            },
            "7": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)[ ]{1}"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*(?:([0-9]{2})((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))|([0-9])((?:\\.|\\)))(?:[ ]{2}(?![ ])))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "string.other.number.mdx"
            },
            "4": {
              "name": "variable.ordered.list.mdx"
            },
            "5": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)(?:[ ]{4}|\\t)"
        },
        {
          "begin": "(?:^|\\G)[\\t ]*([0-9])((?:\\.|\\)))(?:[ ]{1}|(?=[ \\t]*\\n))(\\[[\\t Xx]\\](?=[\\t\\n\\r ]+(?:$|[^\\t\\n\\r ])))?",
          "beginCaptures": {
            "1": {
              "name": "string.other.number.mdx"
            },
            "2": {
              "name": "variable.ordered.list.mdx"
            },
            "3": {
              "name": "keyword.other.tasklist.mdx"
            }
          },
          "patterns": [
            {
              "include": "#markdown-sections"
            }
          ],
          "while": "^(?=[\\t ]*$)|(?:^|\\G)[ ]{3}"
        }
      ]
    },
    "commonmark-paragraph": {
      "begin": "(?![\\t ]*$)",
      "name": "meta.paragraph.mdx",
      "patterns": [
        {
          "include": "#markdown-text"
        }
      ],
      "while": "(?:^|\\G)(?:[ ]{4}|\\t)"
    },
    "commonmark-thematic-break": {
      "match": "(?:^|\\G)[\\t ]*([-*_])[ \\t]*(?:\\1[ \\t]*){2,}$",
      "name": "meta.separator.mdx"
    },

    "extension-mdx-esm": {
      "begin": "(?:^|\\G)(?=(?i:import)[ ])",
      "end": "^(?=[\\t ]*$)|$",
      "name": "meta.embedded.tsx",
      "patterns": [
        {
          "include": "source.tsx#statements"
        }
      ]
    },
    "extension-mdx-expression-text": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "string.other.begin.expression.mdx.js"
        }
      },
      "contentName": "meta.embedded.tsx",
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "string.other.begin.expression.mdx.js"
        }
      },
      "patterns": [
        {
          "include": "source.tsx#expression"
        }
      ]
    },
    "extension-mdx-jsx-text": {
      "begin": "(<)(?=(?![\\t\\n\\r ]))(?:\\s*(/))?(?:\\s*(?:((?:[_$[:upper:]][_$[:alnum:]]*)))(?=[\\s\\/\\>\\{]))?",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.end.jsx"
        },
        "2": {
          "name": "punctuation.definition.tag.closing.jsx"
        },
        "3": {
          "name": "entity.name.tag.aiml.jsx"
        }
      },
      "end": "(?:(\\/)\\s*)?(>)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.tag.self-closing.jsx"
        },
        "2": {
          "name": "punctuation.definition.tag.end.jsx"
        }
      },
      "patterns": [
        {
          "include": "source.tsx#jsx-tag-attribute-name"
        },
        {
          "include": "source.tsx#jsx-tag-attribute-assignment"
        },
        {
          "include": "source.tsx#jsx-string-double-quoted"
        },
        {
          "include": "source.tsx#jsx-string-single-quoted"
        },
        {
          "include": "source.tsx#jsx-evaluated-code"
        },
        {
          "include": "source.tsx#jsx-tag-attributes-illegal"
        }
      ]
    },
    "extension-toml": {
      "begin": "\\A\\+{3}$",
      "beginCaptures": {
        "0": {
          "name": "string.other.begin.toml"
        }
      },
      "contentName": "meta.embedded.toml",
      "end": "^\\+{3}$",
      "endCaptures": {
        "0": {
          "name": "string.other.end.toml"
        }
      },
      "patterns": [
        {
          "include": "source.toml"
        }
      ]
    },
    "extension-yaml": {
      "begin": "\\A-{3}$",
      "beginCaptures": {
        "0": {
          "name": "string.other.begin.yaml"
        }
      },
      "contentName": "meta.embedded.yaml",
      "end": "^-{3}$",
      "endCaptures": {
        "0": {
          "name": "string.other.end.yaml"
        }
      },
      "patterns": [
        {
          "include": "source.yaml"
        }
      ]
    },
    "markdown-frontmatter": {
      "patterns": [
        {
          "include": "#extension-toml"
        },
        {
          "include": "#extension-yaml"
        }
      ]
    },
    "markdown-sections": {
      "patterns": [
        {
          "include": "#commonmark-block-quote"
        },
        {
          "include": "#commonmark-code-fenced"
        },
        {
          "include": "#commonmark-definition"
        },
        {
          "include": "#commonmark-thematic-break"
        },
        {
          "include": "#commonmark-list-item"
        },
        {
          "include": "#extension-mdx-esm"
        },
        {
          "include": "#commonmark-paragraph"
        }
      ]
    },
    "markdown-string": {
      "patterns": [
        {
          "include": "#commonmark-character-escape"
        },
        {
          "include": "#commonmark-character-reference"
        }
      ]
    },
    "markdown-text": {
      "patterns": [
        {
          "include": "#commonmark-attention"
        },
        {
          "include": "#commonmark-character-escape"
        },
        {
          "include": "#commonmark-character-reference"
        },
        {
          "include": "#commonmark-code-text"
        },
        {
          "include": "#commonmark-hard-break-trailing"
        },
        {
          "include": "#commonmark-hard-break-escape"
        },
        {
          "include": "#commonmark-label-end"
        },
        {
          "include": "#commonmark-label-start"
        },
        {
          "include": "#extension-mdx-expression-text"
        },
        {
          "include": "#extension-mdx-jsx-text"
        }
      ]
    },
    "whatwg-html-data-character-reference-named-terminated": {
      "captures": {
        "1": {
          "name": "punctuation.definition.character-reference.begin.html"
        },
        "2": {
          "name": "keyword.control.character-reference.html"
        },
        "3": {
          "name": "punctuation.definition.character-reference.end.html"
        }
      },
      "match": "(&)((?:C(?:(?:o(?:unterClockwiseCo)?|lockwiseCo)ntourIntegra|cedi)|(?:(?:Not(?:S(?:quareSu(?:per|b)set|u(?:cceeds|(?:per|b)set))|Precedes|Greater|Tilde|Less)|Not(?:Righ|Lef)tTriangle|(?:Not(?:(?:Succeed|Precede|Les)s|Greater)|(?:Precede|Succeed)s|Less)Slant|SquareSu(?:per|b)set|(?:Not(?:Greater|Tilde)|Tilde|Less)Full|RightTriangle|LeftTriangle|Greater(?:Slant|Full)|Precedes|Succeeds|Superset|NotHump|Subset|Tilde|Hump)Equ|int(?:er)?c|DotEqu)a|DoubleContourIntegra|(?:n(?:short)?parall|shortparall|p(?:arall|rur))e|(?:rightarrowta|l(?:eftarrowta|ced|ata|Ata)|sced|rata|perm|rced|rAta|ced)i|Proportiona|smepars|e(?:qvpars|pars|xc|um)|Integra|suphso|rarr[pt]|n(?:pars|tg)|l(?:arr[pt]|cei)|Rarrt|(?:hybu|fora)l|ForAl|[GKLNR-Tcknt]cedi|rcei|iexc|gime|fras|[uy]um|oso|dso|ium|Ium)l|D(?:o(?:uble(?:(?:L(?:ong(?:Left)?R|eftR)ight|L(?:ongL)?eft|UpDown|Right|Up)Arrow|Do(?:wnArrow|t))|wn(?:ArrowUpA|TeeA|a)rrow)|iacriticalDot|strok|ashv|cy)|(?:(?:(?:N(?:(?:otN)?estedGreater|ot(?:Greater|Less))|Less(?:Equal)?)Great|GreaterGreat|l[lr]corn|mark|east)e|Not(?:Double)?VerticalBa|(?:Not(?:Righ|Lef)tTriangleB|(?:(?:Righ|Lef)tDown|Right(?:Up)?|Left(?:Up)?)VectorB|RightTriangleB|Left(?:Triangle|Arrow)B|RightArrowB|V(?:er(?:ticalB|b)|b)|UpArrowB|l(?:ur(?:ds|u)h|dr(?:us|d)h|trP|owb|H)|profal|r(?:ulu|dld)h|b(?:igst|rvb)|(?:wed|ve[er])b|s(?:wn|es)w|n(?:wne|ese|sp|hp)|gtlP|d(?:oll|uh|H)|(?:hor|ov)b|u(?:dh|H)|r(?:lh|H)|ohb|hb|St)a|D(?:o(?:wn(?:(?:Left(?:Right|Tee)|RightTee)Vecto|(?:(?:Righ|Lef)tVector|Arrow)Ba)|ubleVerticalBa)|a(?:gge|r)|sc|f)|(?:(?:(?:Righ|Lef)tDown|(?:Righ|Lef)tUp)Tee|(?:Righ|Lef)tUpDown)Vecto|VerticalSeparato|(?:Left(?:Right|Tee)|RightTee)Vecto|less(?:eqq?)?gt|e(?:qslantgt|sc)|(?:RightF|LeftF|[lr]f)loo|u(?:[lr]corne|ar)|timesba|(?:plusa|cirs|apa)ci|U(?:arroci|f)|(?:dzigr|s(?:u(?:pl|br)|imr|[lr])|zigr|angz|nvH|l(?:tl|B)|r[Br])ar|UnderBa|(?:plus|harr|top|mid|of)ci|O(?:verBa|sc|f)|dd?agge|s(?:olba|sc)|g(?:t(?:rar|ci)|sc|f)|c(?:opys|u(?:po|ep)|sc|f)|(?:n(?:(?:v[lr]|w|r)A|l[Aa]|h[Aa]|eA)|x[hlr][Aa]|u(?:ua|da|A)|s[ew]A|rla|o[lr]a|rba|rAa|l[Ablr]a|h(?:oa|A)|era|d(?:ua|A)|cra|vA)r|o(?:lci|sc|ro|pa)|ropa|roar|l(?:o(?:pa|ar)|sc|Ar)|i(?:ma|s)c|ltci|dd?ar|a(?:ma|s)c|R(?:Bar|sc|f)|I(?:mac|f)|(?:u(?:ma|s)|oma|ema|Oma|Ema|[wyz]s|qs|ks|fs|Zs|Ys|Xs|Ws|Vs|Us|Ss|Qs|Ns|Ms|Ks|Is|Gs|Fs|Cs|Bs)c|Umac|x(?:sc|f)|v(?:sc|f)|rsc|n(?:ld|f)|m(?:sc|ld|ac|f)|rAr|h(?:sc|f)|b(?:sc|f)|psc|P(?:sc|f)|L(?:sc|ar|f)|jsc|J(?:sc|f)|E(?:sc|f)|[HT]sc|[yz]f|wf|tf|qf|pf|kf|jf|Zf|Yf|Xf|Wf|Vf|Tf|Sf|Qf|Nf|Mf|Kf|Hf|Gf|Ff|Cf|Bf)r|(?:Diacritical(?:Double)?A|[EINOSYZaisz]a)cute|(?:(?:N(?:egative(?:VeryThin|Thi(?:ck|n))|onBreaking)|NegativeMedium|ZeroWidth|VeryThin|Medium|Thi(?:ck|n))Spac|Filled(?:Very)?SmallSquar|Empty(?:Very)?SmallSquar|(?:N(?:ot(?:Succeeds|Greater|Tilde|Less)T|t)|DiacriticalT|VerticalT|PrecedesT|SucceedsT|NotEqualT|GreaterT|TildeT|EqualT|LessT|at|Ut|It)ild|(?:(?:DiacriticalG|[EIOUaiu]g)ra|(?:u|U)?bre|(?:o|e)?gra)v|(?:doublebar|curly|big|x)wedg|H(?:orizontalLin|ilbertSpac)|Double(?:Righ|Lef)tTe|(?:(?:measured|uw)ang|exponentia|dwang|ssmi|fema)l|(?:Poincarepla|reali|pho|oli)n|(?:black)?lozeng|(?:VerticalL|(?:prof|imag)l)in|SmallCircl|(?:black|dot)squar|rmoustach|l(?:moustach|angl)|(?:b(?:ack)?pr|(?:tri|xo)t|[qt]pr)im|[Tt]herefor|(?:DownB|[Gag]b)rev|(?:infint|nv[lr]tr)i|b(?:arwedg|owti)|an(?:dslop|gl)|(?:cu(?:rly)?v|rthr|lthr|b(?:ig|ar)v|xv)e|n(?:s(?:qsu[bp]|ccu)|prcu)|orslop|NewLin|maltes|Becaus|rangl|incar|(?:otil|Otil|t(?:ra|il))d|[inu]tild|s(?:mil|imn)|(?:sc|pr)cu|Wedg|Prim|Brev)e|(?:CloseCurly(?:Double)?Quo|OpenCurly(?:Double)?Quo|[ry]?acu)te|(?:Reverse(?:Up)?|Up)Equilibrium|C(?:apitalDifferentialD|(?:oproduc|(?:ircleD|enterD|d)o)t|on(?:grue|i)nt|conint|upCap|o(?:lone|pf)|OPY|hi)|(?:(?:(?:left)?rightsquig|(?:longleftr|twoheadr|nleftr|nLeftr|longr|hookr|nR|Rr)ight|(?:twohead|hook)left|longleft|updown|Updown|nright|Right|nleft|nLeft|down|up|Up)a|L(?:(?:ong(?:left)?righ|(?:ong)?lef)ta|eft(?:(?:right)?a|RightA|TeeA))|RightTeeA|LongLeftA|UpTeeA)rrow|(?:(?:RightArrow|Short|Upper|Lower)Left|(?:L(?:eftArrow|o(?:wer|ng))|LongLeft|Short|Upper)Right|ShortUp)Arrow|(?:b(?:lacktriangle(?:righ|lef)|ulle|no)|RightDoubleBracke|RightAngleBracke|Left(?:Doub|Ang)leBracke|(?:vartriangle|downharpoon|c(?:ircl|urv)earrow|upharpoon|looparrow)righ|(?:vartriangle|downharpoon|c(?:ircl|urv)earrow|upharpoon|looparrow|mapsto)lef|(?:UnderBrack|OverBrack|emptys|targ|Sups)e|diamondsui|c(?:ircledas|lubsui|are)|(?:spade|heart)sui|(?:(?:c(?:enter|t)|lmi|ino)d|(?:Triple|mD)D|n(?:otin|e)d|(?:ncong|doteq|su[bp]e|e[gl]s)d|l(?:ess|t)d|isind|c(?:ong|up|ap)?d|b(?:igod|N)|t(?:(?:ri)?d|opb)|s(?:ub|im)d|midd|g(?:tr?)?d|Lmid|DotD|(?:xo|ut|z)d|e(?:s?d|rD|fD|DD)|dtd|Zd|Id|Gd|Ed)o|realpar|i(?:magpar|iin)|S(?:uchTha|qr)|su[bp]mul|(?:(?:lt|i)que|gtque|(?:mid|low)a|e(?:que|xi))s|Produc|s(?:updo|e[cx])|r(?:parg|ec)|lparl|vangr|hamil|(?:homt|[lr]fis|ufis|dfis)h|phmma|t(?:wix|in)|quo|o(?:do|as)|fla|eDo)t|(?:(?:Square)?Intersecti|(?:straight|back|var)epsil|SquareUni|expectati|upsil|epsil|Upsil|eq?col|Epsil|(?:omic|Omic|rca|lca|eca|Sca|[NRTt]ca|Lca|Eca|[Zdz]ca|Dca)r|scar|ncar|herc|ccar|Ccar|iog|Iog)on|Not(?:S(?:quareSu(?:per|b)set|u(?:cceeds|(?:per|b)set))|Precedes|Greater|Tilde|Less)?|(?:(?:(?:Not(?:Reverse)?|Reverse)E|comp|E)leme|NotCongrue|(?:n[gl]|l)eqsla|geqsla|q(?:uat)?i|perc|iiii|coni|cwi|awi|oi)nt|(?:(?:rightleftharpo|leftrightharpo|quaterni)on|(?:(?:N(?:ot(?:NestedLess|Greater|Less)|estedLess)L|(?:eqslant|gtr(?:eqq?)?)l|LessL)e|Greater(?:Equal)?Le|cro)s|(?:rightright|leftleft|upup)arrow|rightleftarrow|(?:(?:(?:righ|lef)tthree|divideon|b(?:igo|ox)|[lr]o)t|InvisibleT)ime|downdownarrow|(?:(?:smallset|tri|dot|box)m|PlusM)inu|(?:RoundImpli|complex|Impli|Otim)e|C(?:ircle(?:Time|Minu|Plu)|ayley|ros)|(?:rationa|mode)l|NotExist|(?:(?:UnionP|MinusP|(?:b(?:ig[ou]|ox)|tri|s(?:u[bp]|im)|dot|xu|mn)p)l|(?:xo|u)pl|o(?:min|pl)|ropl|lopl|epl)u|otimesa|integer|e(?:linter|qual)|setminu|rarrbf|larrb?f|olcros|rarrf|mstpo|lesge|gesle|Exist|[lr]time|strn|napo|fltn|ccap|apo)s|(?:b(?:(?:lack|ig)triangledow|etwee)|(?:righ|lef)tharpoondow|(?:triangle|mapsto)dow|(?:nv|i)infi|ssetm|plusm|lagra|d(?:[lr]cor|isi)|c(?:ompf|aro)|s?frow|(?:hyph|curr)e|kgree|thor|ogo|ye)n|Not(?:Righ|Lef)tTriangle|(?:Up(?:Arrow)?|Short)DownArrow|(?:(?:n(?:triangle(?:righ|lef)t|succ|prec)|(?:trianglerigh|trianglelef|sqsu[bp]se|ques)t|backsim)e|lvertneq|gvertneq|(?:suc|pre)cneq|a(?:pprox|symp)e|(?:succ|prec|vee)e|circe)q|(?:UnderParenthes|OverParenthes|xn)is|(?:(?:Righ|Lef)tDown|Right(?:Up)?|Left(?:Up)?)Vector|D(?:o(?:wn(?:RightVector|LeftVector|Arrow|Tee)|t)|el|D)|l(?:eftrightarrows|br(?:k(?:sl[du]|e)|ac[ek])|tri[ef]|s(?:im[eg]|qb|h)|hard|a(?:tes|ngd|p)|o[pz]f|rm|gE|fr|eg|cy)|(?:NotHumpDownHum|(?:righ|lef)tharpoonu|big(?:(?:triangle|sqc)u|c[au])|HumpDownHum|m(?:apstou|lc)|(?:capbr|xsq)cu|smash|rarr[al]|(?:weie|sha)r|larrl|velli|(?:thin|punc)s|h(?:elli|airs)|(?:u[lr]c|vp)ro|d[lr]cro|c(?:upc[au]|apc[au])|thka|scna|prn?a|oper|n(?:ums|va|cu|bs)|ens|xc[au]|Ma)p|l(?:eftrightarrow|e(?:ftarrow|s(?:dot)?)?|moust|a(?:rrb?|te?|ng)|t(?:ri)?|sim|par|oz|l|g)|n(?:triangle(?:righ|lef)t|succ|prec)|SquareSu(?:per|b)set|(?:I(?:nvisibleComm|ot)|(?:varthe|iio)t|varkapp|(?:vars|S)igm|(?:diga|mco)mm|Cedill|lambd|Lambd|delt|Thet|omeg|Omeg|Kapp|Delt|nabl|zet|to[es]|rdc|ldc|iot|Zet|Bet|Et)a|b(?:lacktriangle|arwed|u(?:mpe?|ll)|sol|o(?:x[HVhv]|t)|brk|ne)|(?:trianglerigh|trianglelef|sqsu[bp]se|ques)t|RightT(?:riangl|e)e|(?:(?:varsu[bp]setn|su(?:psetn?|bsetn?))eq|nsu[bp]seteq|colone|(?:wedg|sim)e|nsime|lneq|gneq)q|DifferentialD|(?:(?:fall|ris)ingdots|(?:suc|pre)ccurly|ddots)eq|A(?:pplyFunction|ssign|(?:tild|grav|brev)e|acute|o(?:gon|pf)|lpha|(?:mac|sc|f)r|c(?:irc|y)|ring|Elig|uml|nd|MP)|(?:varsu[bp]setn|su(?:psetn?|bsetn?))eq|L(?:eft(?:T(?:riangl|e)e|Arrow)|l)|G(?:reaterEqual|amma)|E(?:xponentialE|quilibrium|sim|cy|TH|NG)|(?:(?:RightCeil|LeftCeil|varnoth|ar|Ur)in|(?:b(?:ack)?co|uri)n|vzigza|roan|loan|ffli|amal|sun|rin|n(?:tl|an)|Ran|Lan)g|(?:thick|succn?|precn?|less|g(?:tr|n)|ln|n)approx|(?:s(?:traightph|em)|(?:rtril|xu|u[lr]|xd|v[lr])tr|varph|l[lr]tr|b(?:sem|eps)|Ph)i|(?:circledd|osl|n(?:v[Dd]|V[Dd]|d)|hsl|V(?:vd|D)|Osl|v[Dd]|md)ash|(?:(?:RuleDelay|imp|cuw)e|(?:n(?:s(?:hort)?)?|short|rn)mi|D(?:Dotrah|iamon)|(?:i(?:nt)?pr|peri)o|odsol|llhar|c(?:opro|irmi)|(?:capa|anda|pou)n|Barwe|napi|api)d|(?:cu(?:rlyeq(?:suc|pre)|es)|telre|[ou]dbla|Udbla|Odbla|radi|lesc|gesc|dbla)c|(?:circled|big|eq|[is]|c|x|a|S|[hw]|W|H|G|E|C)circ|rightarrow|R(?:ightArrow|arr|e)|Pr(?:oportion)?|(?:longmapst|varpropt|p(?:lustw|ropt)|varrh|numer|(?:rsa|lsa|sb)qu|m(?:icr|h)|[lr]aqu|bdqu|eur)o|UnderBrace|ImaginaryI|B(?:ernoullis|a(?:ckslash|rv)|umpeq|cy)|(?:(?:Laplace|Mellin|zee)tr|Fo(?:uriertr|p)|(?:profsu|ssta)r|ordero|origo|[ps]op|nop|mop|i(?:op|mo)|h(?:op|al)|f(?:op|no)|dop|bop|Rop|Pop|Nop|Lop|Iop|Hop|Dop|[GJKMOQSTV-Zgjkoqvwyz]op|Bop)f|nsu[bp]seteq|t(?:ri(?:angleq|e)|imesd|he(?:tav|re4)|au)|O(?:verBrace|r)|(?:(?:pitchfo|checkma|t(?:opfo|b)|rob|rbb|l[bo]b)r|intlarh|b(?:brktbr|l(?:oc|an))|perten|NoBrea|rarrh|s[ew]arh|n[ew]arh|l(?:arrh|hbl)|uhbl|Hace)k|(?:NotCupC|(?:mu(?:lti)?|x)m|cupbrc)ap|t(?:riangle|imes|heta|opf?)|Precedes|Succeeds|Superset|NotEqual|(?:n(?:atural|exist|les)|s(?:qc[au]p|mte)|prime)s|c(?:ir(?:cled[RS]|[Ee])|u(?:rarrm|larrp|darr[lr]|ps)|o(?:mmat|pf)|aps|hi)|b(?:sol(?:hsu)?b|ump(?:eq|E)|ox(?:box|[Vv][HLRhlr]|[Hh][DUdu]|[DUdu][LRlr])|e(?:rnou|t[ah])|lk(?:34|1[24])|cy)|(?:l(?:esdot|squ|dqu)o|rsquo|rdquo|ngt)r|a(?:n(?:g(?:msda[a-h]|st|e)|d[dv])|st|p[Ee]|mp|fr|c[Edy])|(?:g(?:esdoto|E)|[lr]haru)l|(?:angrtvb|lrhar|nis)d|(?:(?:th(?:ic)?k|succn?|p(?:r(?:ecn?|n)?|lus)|rarr|l(?:ess|arr)|su[bp]|par|scn|g(?:tr|n)|ne|sc|n[glv]|ln|eq?)si|thetasy|ccupss|alefsy|botto)m|trpezium|(?:hks[ew]|dr?bk|bk)arow|(?:(?:[lr]a|d|c)empty|b(?:nequi|empty)|plank|nequi|odi)v|(?:(?:sc|rp|n)pol|point|fpart)int|(?:c(?:irf|wco)|awco)nint|PartialD|n(?:s(?:u[bp](?:set)?|c)|rarr|ot(?:ni|in)?|warr|e(?:arr)?|a(?:tur|p)|vlt|p(?:re?|ar)|um?|l[et]|ge|i)|n(?:atural|exist|les)|d(?:i(?:am(?:ond)?|v(?:ide)?)|tri|ash|ot|d)|backsim|l(?:esdot|squ|dqu)o|g(?:esdoto|E)|U(?:p(?:Arrow|si)|nion|arr)|angrtvb|p(?:l(?:anckh|us(?:d[ou]|[be]))|ar(?:sl|t)|r(?:od|nE|E)|erp|iv|m)|n(?:ot(?:niv[a-c]|in(?:v[a-c]|E))|rarr[cw]|s(?:u[bp][Ee]|c[er])|part|v(?:le|g[et])|g(?:es|E)|c(?:ap|y)|apE|lE|iv|Ll|Gg)|m(?:inus(?:du|b)|ale|cy|p)|rbr(?:k(?:sl[du]|e)|ac[ek])|(?:suphsu|tris|rcu|lcu)b|supdsub|(?:s[ew]a|n[ew]a)rrow|(?:b(?:ecaus|sim)|n(?:[lr]tri|bump)|csu[bp])e|equivDD|u(?:rcorn|lcorn|psi)|timesb|s(?:u(?:p(?:set)?|b(?:set)?)|q(?:su[bp]|u)|i(?:gma|m)|olb?|dot|mt|fr|ce?)|p(?:l(?:anck|us)|r(?:op|ec?)?|ara?|i)|o(?:times|r(?:d(?:er)?)?)|m(?:i(?:nusd?|d)|a(?:p(?:sto)?|lt)|u)|rmoust|g(?:e(?:s(?:dot|l)?|q)?|sim|n(?:ap|e)|t|l|g)|(?:spade|heart)s|c(?:u(?:rarr|larr|p)|o(?:m(?:ma|p)|lon|py|ng)|lubs|heck|cups|irc?|ent|ap)|colone|a(?:p(?:prox)?|n(?:g(?:msd|rt)?|d)|symp|f|c)|S(?:quare|u[bp]|c)|Subset|b(?:ecaus|sim)|vsu[bp]n[Ee]|s(?:u(?:psu[bp]|b(?:su[bp]|n[Ee]|E)|pn[Ee]|p[1-3E]|m)|q(?:u(?:ar[ef]|f)|su[bp]e)|igma[fv]|etmn|dot[be]|par|mid|hc?y|c[Ey])|f(?:rac(?:78|5[68]|45|3[458]|2[35]|1[2-68])|fr)|e(?:m(?:sp1[34]|ptyv)|psiv|c(?:irc|y)|t[ah]|ng|ll|fr|e)|(?:kappa|isins|vBar|fork|rho|phi|n[GL]t)v|divonx|V(?:dashl|ee)|gammad|G(?:ammad|cy|[Tgt])|[Ldhlt]strok|[HT]strok|(?:c(?:ylct|hc)|(?:s(?:oft|hch)|hard|S(?:OFT|HCH)|jser|J(?:ser|uk)|HARD|tsh|TSH|juk|iuk|I(?:uk|[EO])|zh|yi|nj|lj|k[hj]|gj|dj|ZH|Y[AIU]|NJ|LJ|K[HJ]|GJ|D[JSZ])c|ubrc|Ubrc|(?:yu|i[eo]|dz|v|p|f)c|TSc|SHc|CHc|Vc|Pc|Mc|Fc)y|(?:(?:wre|jm)at|dalet|a(?:ngs|le)p|imat|[lr]ds)h|[CLRUceglnou]acute|ff?llig|(?:f(?:fi|[ij])|sz|oe|ij|ae|OE|IJ)lig|r(?:a(?:tio|rr|ng)|tri|par|eal)|s[ew]arr|s(?:qc[au]p|mte)|prime|rarrb|i(?:n(?:fin|t)?|sin|t|i|c)|e(?:quiv|m(?:pty|sp)|p(?:si|ar)|cir|l|g)|kappa|isins|ncong|doteq|(?:wedg|sim)e|nsime|rsquo|rdquo|[lr]haru|V(?:dash|ert)|Tilde|lrhar|gamma|Equal|UpTee|n(?:[lr]tri|bump)|C(?:olon|up|ap)|v(?:arpi|ert)|u(?:psih|ml)|vnsu[bp]|r(?:tri[ef]|e(?:als|g)|a(?:rr[cw]|ng[de]|ce)|sh|lm|x)|rhard|sim[gl]E|i(?:sin[Ev]|mage|f[fr]|cy)|harrw|(?:n[gl]|l)eqq|g(?:sim[el]|tcc|e(?:qq|l)|nE|l[Eaj]|gg|ap)|ocirc|starf|utrif|d(?:trif|i(?:ams|e)|ashv|sc[ry]|fr|eg)|[du]har[lr]|T(?:HORN|a[bu])|(?:TRAD|[gl]vn)E|odash|[EUaeu]o(?:gon|pf)|alpha|[IJOUYgjuy]c(?:irc|y)|v(?:arr|ee)|succ|sim[gl]|harr|ln(?:ap|e)|lesg|(?:n[gl]|l)eq|ocir|star|utri|vBar|fork|su[bp]e|nsim|lneq|gneq|csu[bp]|zwn?j|yacy|x(?:opf|i)|scnE|o(?:r(?:d[fm]|v)|mid|lt|hm|gt|fr|cy|S)|scap|rsqb|ropf|ltcc|tsc[ry]|QUOT|[EOUYao]uml|rho|phi|n[GL]t|e[gl]s|ngt|I(?:nt|m)|nis|rfr|rcy|lnE|lEg|ufr|S(?:um|cy)|R(?:sh|ho)|psi|Ps?i|[NRTt]cy|L(?:sh|cy|[Tt])|kcy|Kcy|Hat|REG|[Zdz]cy|wr|lE|wp|Xi|Nu|Mu)(;)",
      "name": "constant.language.character-reference.named.html"
    }
  },
  "scopeName": "source.mdx"
}
